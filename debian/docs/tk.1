.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "TORRENTKINO" "1" "May 2014" "" ""
.
.SH "NAME"
\fBtorrentkino\fR \- Kademlia DHT
.
.SH "SYNOPSIS"
\fBtk[46]\fR [\-a hostname] [\-b port] [\-r realm] [\-p port] [\-x server] [\-y port] [\-q] [\-l] [\-s]
.
.SH "DESCRIPTION"
\fBtorrentkino\fR is a P2P name resolution daemon\. It resolves hostnames into IP addresses by using a Kademlia distributed hash table\. This DHT is compatible to the DHT as used in Bittorrent clients like Transmission\.
.
.P
By default, torrentkino sends the first packet to a multicast address\. So, for intranet use cases, you do not need a bootstrap server\. Just start torrentkino on 2 nodes without any parameters\. It simply works\.
.
.P
If you would like to connect nodes around the globe, you may use the Bittorrent network\. Simply select a Bittorrent bootstrap server as seen in the example below\. Your client becomes a full member of the swarm and resolves info hashes to IP/port tuples\. The swarm on the other end does the same for you\. But in your case, the info hash represents a hostname instead of a torrent file\.
.
.SH "OPTIONS"
.
.TP
\fB\-a\fR \fIhostname\fR
Announce this hostname\. By default /etc/hostname is used to determine your hostname\. The SHA1 hash of the hostname becomes the announced info_hash\.
.
.TP
\fB\-b\fR \fIport\fR
Announce this port together with your hostname\. (Default: "8080")
.
.TP
\fB\-n\fR \fInode id string\fR
By default a random node id gets computed on every startup\. For testing purposes it may be useful to keep the same node id all the time\. The above string is not used directly\. Instead its SHA1 hash is used\.
.
.TP
\fB\-r\fR \fIrealm\fR
Creating a realm affects the method how to compute the info hash\. It helps you to isolate your nodes and be part of a bigger swarm at the same time\. This is useful to handle duplicate hostnames\. With different realms everybody may have his own http://mycloud\.p2p for example\.
.
.TP
\fB\-p\fR \fIport\fR
Listen to this port (Default: UDP/6881)
.
.TP
\fB\-x\fR \fIserver\fR
Use server as a bootstrap server\. Otherwise a multicast address is used\. For LAN only cases the multicast bootstrap is enough\.
.
.TP
\fB\-y\fR \fIport\fR
The bootstrap server will be addressed at this port\. (Default: UDP/6881)
.
.TP
\fB\-l\fR
Lazy mode: This option sets a predefined bootstrap server like \fIrouter\.utorrent\.com\fR for example\.
.
.TP
\fB\-s\fR
Strict mode: In this mode all friendly nodes must operate on the same port to find each other\. Nodes, that operate/announce different ports, do not show up in search results, even if they announce the \fIright\fR SHA1 hash\.
.
.TP
\fB\-f\fR
Fork and become a daemon\.
.
.TP
\fB\-q\fR
Be quiet\.
.
.SH "EXAMPLES"
Announce the hostname \fImy\.cloud\fR globally\.
.
.IP "" 4
.
.nf

$ tk6 \-a my\.cloud \-l
$ host my\.cloud ::1
.
.fi
.
.IP "" 0
.
.P
Announce the hostname \fImycloud\.p2p\fR within the LAN\.
.
.IP "" 4
.
.nf

$ tk4 \-a mycloud\.p2p
$ host mycloud\.p2p 127\.0\.0\.1
.
.fi
.
.IP "" 0
.
.P
Isolate your nodes within a realm \fIdarkness\fR, fork the process into background and log everything to syslog\.
.
.IP "" 4
.
.nf

$ tk6 \-a torrentkino\.cloud \-r darkness \-l \-s \-f \-v
$ host torrentkino\.cloud ::1
.
.fi
.
.IP "" 0
.
.SH "INSTALLATION"
There is a simple installation helper for Debian/Ubuntu\. Just run one of the following commands to create a installable package\.
.
.IP "" 4
.
.nf

$ make debian
$ make ubuntu
.
.fi
.
.IP "" 0
.
.P
Otherwise, you may use
.
.IP "" 4
.
.nf

$ make
$ sudo make install
.
.fi
.
.IP "" 0
.
.SH "SEE ALSO"
nsswitch\.conf(5)
