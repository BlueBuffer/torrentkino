.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "TORRENTKINO" "1" "February 2014" "" ""
.
.SH "NAME"
\fBtorrentkino\fR \- Kademlia DHT
.
.SH "SYNOPSIS"
\fBtorrentkino\fR [\-d] [\-q] [\-p port] [\-a hostname] [\-b port] [\-r realm] [\-s] [\-x server] [\-y port]
.
.SH "DESCRIPTION"
\fBtorrentkino\fR is a P2P name resolution daemon\. It resolves hostnames into IP addresses by using a Kademlia distributed hash table\. This DHT is compatible to the DHT as used in Bittorrent clients like Transmission\.
.
.P
By default, torrentkino sends the first packet to a multicast address\. So, for intranet use cases, you do not need a bootstrap server\. Just start torrentkino on 2 nodes without any parameters\. It simply works\.
.
.P
If you would like to connect nodes around the globe, you may use the Bittorrent network\. Simply select a Bittorrent bootstrap server as seen in the example below\. Your client becomes a full member of the swarm and resolves info hashes to IP/port tuples\. The swarm on the other end does the same for you\. But in your case, the info hash represents a hostname instead of a torrent file\.
.
.P
A NSS module makes any hostname with \fI\.p2p\fR at the end transparently available to your Linux OS\.
.
.SH "FILES"
.
.TP
\fB/etc/nsswitch\.conf\fR
Add \fBtk\fR to the \fIhosts\fR line and your Linux OS will forward \fI\.p2p\fR requests to the Torrentkino DHT daemon\.
.
.TP
\fB$HOME/\.torrentkino\.conf\fR
This file gets written by the Torrentkino daemon and contains the server port number and some other hints\. Those hints are used by \fBlibnss_tk\.so\.2\fR and the \fBtk\fR cli program\.
.
.TP
\fB/etc/torrentkino\.conf\fR
This file gets written by the Torrentkino daemon when started by root for example at boot time or by using sudo\. It works like the file above\. \fBlibnss_tk\.so\.2\fR and the \fBtk\fR cli program will look for \fB$HOME/\.torrentkino\.conf\fR first\.
.
.SH "OPTIONS"
.
.IP "\(bu" 4
\fB\-a\fR \fIhostname\fR: Announce this hostname\. By default /etc/hostname is used to determine your hostname\. The SHA1 hash of the hostname becomes the announced info_hash\.
.
.IP "\(bu" 4
\fB\-b\fR \fIport\fR: Announce this port together with your hostname\. (Default: "8080")
.
.IP "\(bu" 4
\fB\-n\fR \fInode id string\fR: By default a random node id gets computed on every startup\. For testing purposes it may be useful to keep the same node id all the time\. The above string is not used directly\. Instead its SHA1 hash is used\.
.
.IP "\(bu" 4
\fB\-r\fR \fIrealm\fR: Creating a realm affects the method how to compute the info hash\. It helps you to isolate your nodes and be part of a bigger swarm at the same time\. This is useful to handle duplicate hostnames\. With different realms everybody may have his own http://mycloud\.p2p for example\.
.
.IP "\(bu" 4
\fB\-s\fR Strict mode: Only accept responses that match your own announced port\.
.
.IP "\(bu" 4
\fB\-p\fR \fIport\fR: Listen to this port (Default: UDP/6881)
.
.IP "\(bu" 4
\fB\-x\fR \fIserver\fR: Use server as a bootstrap server\. The server can be an IPv6 address, a FQHN like www\.example\.net or even a IPv6 multicast address\. (Default: ff0e::1)
.
.IP "\(bu" 4
\fB\-y\fR \fIport\fR: The bootstrap server will be addressed at this port\. (Default: UDP/6881)
.
.IP "\(bu" 4
\fB\-d\fR: Start as a daemon and run in background\. The output will be send to syslog\.
.
.IP "\(bu" 4
\fB\-v\fR: Verbose\.
.
.IP "\(bu" 4
\fB\-k\fR \fIpassword\fR: Setting a password results in encrypting each packet with AES256\. The encrypted message is encapsulated in bencode too\. You effectively isolate your nodes from the rest of the world this way\. This method is not compatible to the Bittorrent network and only works between torrentkino daemons\. (Torrentkino needs to be compiled with PolarSSL support\. See Makefile\.)
.
.IP "" 0
.
.SH "EXAMPLES"
Announce the hostname \fImycloud\.p2p\fR globally\.
.
.IP "" 4
.
.nf

$ torrentkino6 \-a mycloud\.p2p \-x dht\.wifi\.pps\.jussieu\.fr
$ getent hosts mycloud\.p2p
$ tk mycloud\.p2p
$ tk http://mycloud\.p2p/index\.html

$ torrentkino4 \-a mycloud\.p2p \-x router\.utorrent\.com
$ getent hosts mycloud\.p2p
$ tk mycloud\.p2p
$ tk http://mycloud\.p2p/index\.html
.
.fi
.
.IP "" 0
.
.SH "INSTALLATION"
There is a simple installation helper for Debian/Ubuntu\. Just run one of the following commands to create a installable package\.
.
.IP "" 4
.
.nf

$ make debian
$ make ubuntu
.
.fi
.
.IP "" 0
.
.P
Otherwise, you may use
.
.IP "" 4
.
.nf

$ make
$ sudo make install
.
.fi
.
.IP "" 0
.
.P
Add \fBtk\fR to the \fI/etc/nsswitch\.conf\fR\. Example:
.
.IP "" 4
.
.nf

hosts: files tk dns
.
.fi
.
.IP "" 0
.
.SH "SEE ALSO"
nsswitch\.conf(5)
